/*
 * Copyright (c) 2024 will-hedges <https://github.com/will-hedges>
 * SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define FN1     1

/ {
    behaviors {
        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
    &gresc        &kp N1    &kp N2         &kp N3  &kp N4  &kp N5  &kp N6     &kp N7  &kp N8     &kp N9   &kp N0          &kp MINUS  &kp EQUAL &kp BSPC             &none     &none
    &kp TAB       &kp Q     &kp W          &kp E   &kp R   &kp T   &kp Y      &kp U   &kp I      &kp O    &kp P           &kp LBKT   &kp RBKT  &kp BSLH             &none     &none
    &lt FN1 CAPS  &kp A     &kp S          &kp D   &kp F   &kp G   &kp H      &kp J   &kp K      &kp L    &kp SEMI        &kp SQT              &kp RET
    &kp LSHFT     &kp Z     &kp X          &kp C   &kp V   &kp B   &kp N      &kp M   &kp COMMA  &kp DOT  &kp FSLH                             &kp RSHFT            &kp UP
    &kp LCTRL     &kp LGUI  &mt LALT PG_UP                         &kp SPACE                              &mt RALT PG_DN  &mo FN1    &kp RCTRL            &kp LEFT  &kp DOWN  &kp RIGHT
            >;
        };
        
        fn1_layer {
            bindings = <
    &kp GRAVE  &kp F1  &kp F2  &kp F3  &kp F4       &kp F5        &kp F6  &kp F7        &kp F8    &kp F9        &kp F10  &kp F11         &kp F12  &kp BSPC            &none     &none
    &trans     &trans  &trans  &trans  &bootloader  &trans        &trans  &out OUT_USB  &kp UP    &out OUT_TOG  &trans   &trans          &trans   &trans              &none     &none
    &trans     &trans  &trans  &trans  &trans       &trans        &trans  &kp LEFT      &kp DOWN  &kp RIGHT     &trans   &trans                   &trans
    &trans     &trans  &trans  &trans  &trans       &out OUT_BLE  &trans  &kp C_MUTE    &trans    &trans        &trans                            &trans              &none 
    &trans     &trans  &trans                                     &trans                                        &trans   &bt BT_CLR_ALL  &trans           &kp C_PREV  &kp C_PP  &kp C_NEXT
            >;
        };
    };
};